{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/andrevinagre23/Projeto-DiarioDigital/blob/main/DI%C3%81RIO_DIGITAL\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "from IPython.display import clear_output\n",
        "import os\n",
        "\n",
        "ARQUIVO = \"diario.txt\"\n",
        "\n",
        "def salvar_anotacao():\n",
        "    \"\"\"Salva uma nova anota√ß√£o com data e hora.\"\"\"\n",
        "    clear_output()\n",
        "    print(\"üìù Nova Anota√ß√£o\\n\")\n",
        "    texto = input(\"Digite sua anota√ß√£o:\\n> \").strip()\n",
        "\n",
        "    if texto:\n",
        "        data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n",
        "        try:\n",
        "            with open(ARQUIVO, \"a\", encoding=\"utf-8\") as f:\n",
        "                f.write(f\"[{data_hora}] {texto}\\n\")\n",
        "            print(\"\\n‚úÖ Anota√ß√£o salva com sucesso!\")\n",
        "        except Exception as e:\n",
        "            print(f\"‚ùå Erro ao salvar a anota√ß√£o: {e}\")\n",
        "    else:\n",
        "        print(\"‚ö†Ô∏è A anota√ß√£o est√° vazia!\")\n",
        "\n",
        "def mostrar_anotacoes(numeradas=False):\n",
        "    \"\"\"Exibe todas as anota√ß√µes salvas, com ou sem numera√ß√£o.\"\"\"\n",
        "    clear_output()\n",
        "    print(\"üìö Anota√ß√µes Salvas\\n\")\n",
        "\n",
        "    if not os.path.exists(ARQUIVO):\n",
        "        print(\"üìò O di√°rio ainda est√° vazio.\")\n",
        "        return []\n",
        "\n",
        "    try:\n",
        "        with open(ARQUIVO, \"r\", encoding=\"utf-8\") as f:\n",
        "            linhas = [linha.strip() for linha in f if linha.strip()]\n",
        "        if not linhas:\n",
        "            print(\"üìò O di√°rio ainda est√° vazio.\")\n",
        "            return []\n",
        "\n",
        "        print(\"-\" * 40)\n",
        "        for idx, linha in enumerate(linhas, 1):\n",
        "            print(f\"{idx}. {linha}\" if numeradas else linha)\n",
        "        print(\"-\" * 40)\n",
        "        return linhas\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Erro ao ler as anota√ß√µes: {e}\")\n",
        "        return []\n",
        "\n",
        "def excluir_anotacao():\n",
        "    \"\"\"Permite excluir uma anota√ß√£o espec√≠fica pelo n√∫mero.\"\"\"\n",
        "    linhas = mostrar_anotacoes(numeradas=True)\n",
        "    if not linhas:\n",
        "        return\n",
        "\n",
        "    try:\n",
        "        escolha = input(\"\\nDigite o n√∫mero da anota√ß√£o a excluir (ou ENTER para cancelar): \").strip()\n",
        "        if not escolha:\n",
        "            print(\"‚ùé Exclus√£o cancelada.\")\n",
        "            return\n",
        "\n",
        "        idx = int(escolha)\n",
        "        if 1 <= idx <= len(linhas):\n",
        "            anotacao_removida = linhas.pop(idx - 1)\n",
        "            with open(ARQUIVO, \"w\", encoding=\"utf-8\") as f:\n",
        "                for linha in linhas:\n",
        "                    f.write(linha + \"\\n\")\n",
        "            print(f\"üóëÔ∏è Anota√ß√£o removida:\\n> {anotacao_removida}\")\n",
        "        else:\n",
        "            print(\"‚ùå N√∫mero inv√°lido.\")\n",
        "    except ValueError:\n",
        "        print(\"‚ùå Entrada inv√°lida. Digite apenas o n√∫mero da anota√ß√£o.\")\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Erro ao excluir anota√ß√£o: {e}\")\n",
        "\n",
        "def menu():\n",
        "    \"\"\"Menu principal do di√°rio eletr√¥nico.\"\"\"\n",
        "    while True:\n",
        "        print(\"\\nüìò Di√°rio Eletr√¥nico\")\n",
        "        print(\"1. ‚úçÔ∏è Escrever nova anota√ß√£o\")\n",
        "        print(\"2. üìñ Ver anota√ß√µes\")\n",
        "        print(\"3. üóëÔ∏è Excluir uma anota√ß√£o\")\n",
        "        print(\"4. üö™ Sair\")\n",
        "\n",
        "        opcao = input(\"Escolha uma op√ß√£o (1/2/3/4): \").strip()\n",
        "\n",
        "        if opcao == \"1\":\n",
        "            salvar_anotacao()\n",
        "        elif opcao == \"2\":\n",
        "            mostrar_anotacoes()\n",
        "        elif opcao == \"3\":\n",
        "            excluir_anotacao()\n",
        "        elif opcao == \"4\":\n",
        "            print(\"üëã At√© logo!\")\n",
        "            break\n",
        "        else:\n",
        "            clear_output()\n",
        "            print(\"‚ùå Op√ß√£o inv√°lida. Tente novamente.\")\n",
        "\n",
        "# Executar o menu principal\n",
        "if __name__ == \"__main__\":\n",
        "    clear_output()\n",
        "    menu()\n"
      ],
      "metadata": {
        "id": "vzM9Ta27l2gQ",
        "outputId": "b368cae1-36d0-4982-9340-8dfd17c3ee89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üìö Anota√ß√µes Salvas\n",
            "\n",
            "----------------------------------------\n",
            "[30/04/2025 21:24:54] Teste 02\n",
            "----------------------------------------\n",
            "\n",
            "üìò Di√°rio Eletr√¥nico\n",
            "1. ‚úçÔ∏è Escrever nova anota√ß√£o\n",
            "2. üìñ Ver anota√ß√µes\n",
            "3. üóëÔ∏è Excluir uma anota√ß√£o\n",
            "4. üö™ Sair\n",
            "Escolha uma op√ß√£o (1/2/3/4): 4\n",
            "üëã At√© logo!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Nova se√ß√£o"
      ],
      "metadata": {
        "id": "AzoAcvgunxW7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "from IPython.display import clear_output\n",
        "import os\n",
        "\n",
        "ARQUIVO = \"diario.txt\"\n",
        "\n",
        "def salvar_anotacao():\n",
        "    \"\"\"Salva uma nova anota√ß√£o com data e hora.\"\"\"\n",
        "    clear_output()\n",
        "    print(\"üìù Nova Anota√ß√£o\\n\")\n",
        "    texto = input(\"Digite sua anota√ß√£o:\\n> \").strip()\n",
        "\n",
        "    if texto:\n",
        "        data_hora = datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")\n",
        "        try:\n",
        "            with open(ARQUIVO, \"a\", encoding=\"utf-8\") as f:\n",
        "                f.write(f\"[{data_hora}] {texto}\\n\")\n",
        "            print(\"\\n‚úÖ Anota√ß√£o salva com sucesso!\")\n",
        "        except Exception as e:\n",
        "            print(f\"‚ùå Erro ao salvar a anota√ß√£o: {e}\")\n",
        "    else:\n",
        "        print(\"‚ö†Ô∏è A anota√ß√£o est√° vazia!\")\n",
        "\n",
        "def mostrar_anotacoes(numeradas=False):\n",
        "    \"\"\"Exibe todas as anota√ß√µes salvas, com ou sem numera√ß√£o.\"\"\"\n",
        "    clear_output()\n",
        "    print(\"üìö Anota√ß√µes Salvas\\n\")\n",
        "\n",
        "    if not os.path.exists(ARQUIVO):\n",
        "        print(\"üìò O di√°rio ainda est√° vazio.\")\n",
        "        return []\n",
        "\n",
        "    try:\n",
        "        with open(ARQUIVO, \"r\", encoding=\"utf-8\") as f:\n",
        "            linhas = [linha.strip() for linha in f if linha.strip()]\n",
        "        if not linhas:\n",
        "            print(\"üìò O di√°rio ainda est√° vazio.\")\n",
        "            return []\n",
        "\n",
        "        print(\"-\" * 40)\n",
        "        for idx, linha in enumerate(linhas, 1):\n",
        "            print(f\"{idx}. {linha}\" if numeradas else linha)\n",
        "        print(\"-\" * 40)\n",
        "        return linhas\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Erro ao ler as anota√ß√µes: {e}\")\n",
        "        return []\n",
        "\n",
        "def excluir_anotacao():\n",
        "    \"\"\"Permite excluir uma anota√ß√£o espec√≠fica pelo n√∫mero.\"\"\"\n",
        "    linhas = mostrar_anotacoes(numeradas=True)\n",
        "    if not linhas:\n",
        "        return\n",
        "\n",
        "    try:\n",
        "        escolha = input(\"\\nDigite o n√∫mero da anota√ß√£o a excluir (ou ENTER para cancelar): \").strip()\n",
        "        if not escolha:\n",
        "            print(\"‚ùé Exclus√£o cancelada.\")\n",
        "            return\n",
        "\n",
        "        idx = int(escolha)\n",
        "        if 1 <= idx <= len(linhas):\n",
        "            anotacao_removida = linhas.pop(idx - 1)\n",
        "            with open(ARQUIVO, \"w\", encoding=\"utf-8\") as f:\n",
        "                for linha in linhas:\n",
        "                    f.write(linha + \"\\n\")\n",
        "            print(f\"üóëÔ∏è Anota√ß√£o removida:\\n> {anotacao_removida}\")\n",
        "        else:\n",
        "            print(\"‚ùå N√∫mero inv√°lido.\")\n",
        "    except ValueError:\n",
        "        print(\"‚ùå Entrada inv√°lida. Digite apenas o n√∫mero da anota√ß√£o.\")\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Erro ao excluir anota√ß√£o: {e}\")\n",
        "\n",
        "def menu():\n",
        "    \"\"\"Menu principal do di√°rio eletr√¥nico.\"\"\"\n",
        "    while True:\n",
        "        print(\"\\nüìò Di√°rio Eletr√¥nico\")\n",
        "        print(\"1. ‚úçÔ∏è Escrever nova anota√ß√£o\")\n",
        "        print(\"2. üìñ Ver anota√ß√µes\")\n",
        "        print(\"3. üóëÔ∏è Excluir uma anota√ß√£o\")\n",
        "        print(\"4. üö™ Sair\")\n",
        "\n",
        "        opcao = input(\"Escolha uma op√ß√£o (1/2/3/4): \").strip()\n",
        "\n",
        "        if opcao == \"1\":\n",
        "            salvar_anotacao()\n",
        "        elif opcao == \"2\":\n",
        "            mostrar_anotacoes()\n",
        "        elif opcao == \"3\":\n",
        "            excluir_anotacao()\n",
        "        elif opcao == \"4\":\n",
        "            print(\"üëã At√© logo!\")\n",
        "            break\n",
        "        else:\n",
        "            clear_output()\n",
        "            print(\"‚ùå Op√ß√£o inv√°lida. Tente novamente.\")\n",
        "\n",
        "# Executar o menu principal\n",
        "if __name__ == \"__main__\":\n",
        "    clear_output()\n",
        "    menu()\n"
      ],
      "metadata": {
        "id": "9sgo1_Tunyba",
        "outputId": "7f4844d9-9ff0-49fe-ebe2-ca96cf81cbf5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üìò Di√°rio Eletr√¥nico\n",
            "1. ‚úçÔ∏è Escrever nova anota√ß√£o\n",
            "2. üìñ Ver anota√ß√µes\n",
            "3. üóëÔ∏è Excluir uma anota√ß√£o\n",
            "4. üö™ Sair\n",
            "Escolha uma op√ß√£o (1/2/3/4): 4\n",
            "üëã At√© logo!\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Conhe√ßa o Colab",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}